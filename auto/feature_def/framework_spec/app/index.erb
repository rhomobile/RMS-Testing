<div class="toolbar">
  <h1 id="pageTitle">
    RhodesTest
  </h1>
</div>

<div>
  <input type="button" id="eval" value="Eval"/>
  <br>
  <div>Enter Ruby code here</div>
  <textarea id="ruby_code" rows="5" width="100%"></textarea>
  <br>
  <div>Ruby eval result</div>
  <div id="ruby_result"></div>
  <br>
  <div>Ruby eval error</div>
  <div id="ruby_error"></div>
  <br>
  <br>

</div>

<script>

  $("#eval").click( function () {
    try {
      $.post({
        url: "<%= url_for(action: 'do_eval', controller: 'SpecRunner')  %>",
        data: { code: ruby_code.value },
        timeout: 10000
      }).done(function (response) {
        ruby_result.innerText = response['result'];
        ruby_error.innerText = response['error'];
      }).fail(function( xhr, status, error) {
        ruby_result.innerText = status;
      });
    } catch(e) {
      ruby_result.innerText = e;
    }
  });

</script>

<button class="runSpec button">Run Specs!</button>

<div>

  <!--
<% @color = @code == 0 ? "#00ff00" : "#ff0000" %>

<ul id="specrunner" title="SpecRunner" selected="true">
    <li id="total" style="color:<%= @color %>">waiting results...</li>
    <li id="passed" style="color:<%= @color %>">waiting results...</li>
    <li id="failed" style="color:<%= @color %>">waiting results...</li>
</ul>
-->
  <ul id="specrunner" title="SpecRunner" selected="true">
    <li id="total"></li>
    <li id="passed"></li>
    <li id="failed"></li>
    <li id="not_supported"></li>
    <li id="specs"></li>
  </ul>


</div>

<div id="specTree"></div>

<script>

    var opts = {
        lines: 13 // The number of lines to draw
        , length: 28 // The length of each line
        , width: 14 // The line thickness
        , radius: 42 // The radius of the inner circle
        , scale: 1 // Scales overall size of the spinner
        , corners: 1 // Corner roundness (0..1)
        , color: '#000' // #rgb or #rrggbb or array of colors
        , opacity: 0.25 // Opacity of the lines
        , rotate: 0 // The rotation offset
        , direction: 1 // 1: clockwise, -1: counterclockwise
        , speed: 1 // Rounds per second
        , trail: 60 // Afterglow percentage
        , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS
        , zIndex: 2e9 // The z-index (defaults to 2000000000)
        , className: 'spinner' // The CSS class to assign to the spinner
        , top: '50%' // Top position relative to parent
        , left: '50%' // Left position relative to parent
        , shadow: false // Whether to render a shadow
        , hwaccel: false // Whether to use hardware acceleration
        , position: 'absolute' // Element positioning
    }


    // remove for performance on Travis
    //$.get( "<%= url_for(action: 'get_nodes', controller: 'SpecRunner')  %>")
    //    .done(function( data ) {
    //        console.log(data);
    //        $("#specTree").jstree({
    //            "plugins": ["checkbox"],
    //            "checkbox": {
    //                "keep_selected_style": false
    //            },
    //            "multiple": true,
    //            "core": {
    //                "data": data
    //            }
    //        });
    //    });

    var createSpecInfo = function (root, info) {

        for (var i = 0; i < info.length; ++i) {
            var d = $('<div class="foldable"></div>');
            var specInfo = info[i];
            d.text(specInfo.message);

            if (specInfo.not_supported) {
              d.addClass('rho_not_supported');
              root.addClass('rho_partial_not_supported');
            }

            for (var j = 0; j < specInfo.backtrace.length; ++j) {
                var line = specInfo.backtrace[j];
                var btdiv = $('<div class="btline"></div>');
                btdiv.text(line);
                d.append(btdiv);
            }

            d.click(function () {
                $(this).children('.btline').slideToggle('slow');
            });

            root.append(d);
        }

    };

    $(".runSpec").on("click", function () {
        var selectedNodes = $('#specTree').jstree(true).get_selected(true);
        var data = {specs: []};
        for (var i = 0; i < selectedNodes.length; i++) {
            if (selectedNodes[i].children.length === 0) {
                data.specs.push(selectedNodes[i].original.path)
            }
        }
        console.log(data);


        specs.innerHTML = ""
        total.innerText = "";
        passed.innerText = "";
        failed.innerText = "";
        not_supported.innerText = "";

        var target = document.getElementById('specrunner');
        var spinner = new Spinner(opts).spin(target);

        $.post({
            url: "<%= url_for(action: 'run_selected_specs', controller: 'SpecRunner')  %>",
            data: data,
            dataType: 'json',
            timeout: -1
        }).done(function (response) {
            total.innerText = "Total:  " + response.total;
            passed.innerText = "Passed: " + response.passed;
            failed.innerText = "Failed: " + response.failed;
            not_supported.innerText = "Not supported: " + response.not_supported;

            Object.keys(response.locations).forEach(function (key) {

                var info = response.locations[key];
                var d = $('<div class="specinfo"></div>');
                d.text(key);

                createSpecInfo(d, info);

                $("#specs").append(d);
            });
          /*
           for( var i = 0; i < response.locations.length; ++i ) {
           var loc = response.locations[i];
           var d = $('<div class="foldable"></div>');
           d.text(loc.message);

           for ( var j = 0; j < loc.backtrace.length; ++ j ) {
           var line = loc.backtrace[j];
           var btdiv = $('<div class="btline"></div>');
           btdiv.text(line);
           d.append(btdiv);
           }

           d.click(function(){
           $(this).children('.btline').slideToggle('slow');
           });

           $("#locations").append(d);
           }
           */

        }).fail(function (xhr, status, error) {
            total.innerText = "Error";
            passed.innerText = status;
            failed.innerText = JSON.stringify(error);
        }).always(function () {
            spinner.stop();
        });
    });



    function runAllSpecs() {
        specs.innerHTML = ""
        total.innerText = "";
        passed.innerText = "";
        failed.innerText = "";
        not_supported.innerText = "";

        var target = document.getElementById('specrunner');
        var spinner = new Spinner(opts).spin(target);

        $.post({
            url: "<%= url_for(action: 'run_all_specs', controller: 'SpecRunner')  %>",
            data: '{}',
            dataType: 'json',
            timeout: -1
        }).done(function (response) {
            total.innerText = "Total:  " + response.total;
            passed.innerText = "Passed: " + response.passed;
            failed.innerText = "Failed: " + response.failed;
            not_supported.innerText = "Not supported: " + response.not_supported;

            Object.keys(response.locations).forEach(function (key) {

                var info = response.locations[key];
                var d = $('<div class="specinfo"></div>');
                d.text(key);

                createSpecInfo(d, info);

                $("#specs").append(d);
            });
        }).fail(function (xhr, status, error) {
            total.innerText = "Error";
            passed.innerText = status;
            failed.innerText = JSON.stringify(error);
        }).always(function () {
            spinner.stop();
        });

    }


    $(function() {
     // auto start all specs
     // comment it for manual mode
     runAllSpecs();
    });

</script>
