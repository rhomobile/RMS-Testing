<script type="text/javascript">
    (function () {
        var jasmineEnv = jasmine.getEnv();
        jasmineEnv.updateInterval = 1000;

        var htmlReporter = new jasmine.HtmlReporter();
        jasmineEnv.addReporter(htmlReporter);

        jasmineEnv.specFilter = function (spec) {
            return htmlReporter.specFilter(spec);
        };

        var currentWindowOnload = window.onload;
        window.onload = function() {
          if (currentWindowOnload) {
            currentWindowOnload();
          }

          //Scanner Module Call
          for (var iarray = 0;iarray < scannerparams.length; iarray++ ){
            startScannerEnum(scannerparams[iarray]);
          }
          
          for (var iarray = 0;iarray < setGetScanParams.length; iarray++ ){
            startSetGetProperty(setGetScanParams[iarray]);
          }
          

          execJasmine();
        };

        function execJasmine() {
          jasmineEnv.execute();
        }

    })();
      
  /*function scannerCallBack(scannerType){
    
    var type = new Array();
    arrScannerType = scannerType.split(",");
  
    for (var j = 0; j < arrScannerType.length; j ++){
      generateArrayWithScannerType(arrScannerType[j]);
    }

    //Scanner Module Call
    for (var iarray = 0;iarray < scannerparams.length; iarray++ ){
      startScannerEnum(scannerparams[iarray]);
    }
  
    jasmineEnv.execute();
  }
  
    (function() {
    $.get('/app/Auto/enumScanner');
    jasmineEnv = jasmine.getEnv();
    jasmineEnv.updateInterval = 1000;
    
    var htmlReporter = new jasmine.HtmlReporter();
    jasmineEnv.addReporter(htmlReporter);
    jasmineEnv.specFilter = function(spec) {
      return htmlReporter.specFilter(spec);
    };
  
  })();*/
</script>