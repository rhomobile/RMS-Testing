<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
	<MODULE name="Megamodule" parent="Rho.Examples" generateUnderscoreRubyNames="true">
		<HELP_OVERVIEW>is used to either navigate to a URL or call a javascript function when an attached card reader decodes data.</HELP_OVERVIEW>
		<MORE_HELP>Only the foreground RhoElements application is given access to the card reader hardware, when an application is sent to the background its state will be saved and it will automatically relinquish control of the card reader.  When brought back to the foreground, an application previously using the card reader will have its previous configuration (eg. pinTimeout) reapplied to the card reader automatically.</MORE_HELP>
	    <TEMPLATES>
	    	<SINGLETON_INSTANCES/> 
	    	<DEFAULT_INSTANCE/> 
	    	<PROPERTY_BAG/>
	    </TEMPLATES>	
		<CONSTANTS>
			<CONSTANT name="CONST1_STRING" value="value1">
				<DESC>This is documentation const 1</DESC>
			</CONSTANT>
			<CONSTANT name="CONST2_INTEGER" value="123" type="INTEGER">
				<DESC>This is documentation const 2</DESC>
			</CONSTANT>
		</CONSTANTS>	
		<PROPERTIES> 
			<DESC>object supports this properties bla bla bla :</DESC>
			<PROPERTY name="StringProperty" type="STRING" readOnly="true">
				<DESC>possible value - "hardware"/"software"</DESC>
				<VALUES>
					<VALUE constName="CONST_STRING_1" value="const1" type="STRING">
						<DESC>value doc 1</DESC>
					</VALUE>
					<VALUE constName="CONST_STRING_2" value="const2">
						<DESC>value doc 2</DESC>
					</VALUE>
				</VALUES>
			</PROPERTY>
			<PROPERTY name="IntegerProperty" type="INTEGER" usePropertyBag="accessorsViaPropertyBag" default="12345">
				<DESC>int property</DESC>
			</PROPERTY>
			<ALIASES>
				<ALIAS new="integer_property" existing="IntegerProperty" >
					<DESC>Message for logging in case of deprecated attribute</DESC>
				</ALIAS>
				<ALIAS new="string_property" existing="StringProperty" >
					<DESC>Message for logging in case of deprecated attribute</DESC>
				</ALIAS>
			</ALIASES>
		</PROPERTIES>	
		<METHODS>
			<METHOD name="typesTest">
				<DESC>test types: return true if (paramStr == "ABC") AND (paramBool == true) AND (paramInt == 555123) AND (paramFloat == 3.14) AND (paramArray == [1,2,3]) AND (paramHash == {:p1 => "abc", :p2 => "qwe"}).</DESC>
				<PARAMS>
					<PARAM name="paramStr" type="STRING"/>
					<PARAM name="paramBool" type="BOOLEAN"/>
					<PARAM name="paramInt" type="INTEGER"/>
					<PARAM name="paramFloat" type="FLOAT"/>
					<PARAM name="paramArray" type="ARRAY">
						<PARAM type="INTEGER"/>
					</PARAM>
					<PARAM name="paramHash" type="HASH">
						<PARAMS>
							<PARAM name="strParam" type="STRING"/>
						</PARAMS>	
					</PARAM>
					
				</PARAMS>
				<RETURN type="BOOLEAN">
					<DESC>return true if (paramStr == "ABC") AND (paramBool == true) AND (paramInt == 555123) AND (paramFloat == 3.14) AND (paramArray == [1,2,3]) AND (paramHash == {:p1 => "abc", :p2 => "qwe"}).</DESC>
				</RETURN>
			</METHOD>
			<METHOD name="produceArray">
				<DESC>example of producing Array for return - must return [1,2,3,4,5,6,7,8,9,10]</DESC>
				<RETURN type="ARRAY">
					<PARAM type="INTEGER">
						<DESC>doc produceArray</DESC>
					</PARAM>	
					<DESC>return 1,2,3,4,5,6,7,8,9,10</DESC>
				</RETURN>
			</METHOD>
			<METHOD name="produceHash">
				<DESC>example of producing Hash for return</DESC>
				<RETURN type="HASH">
					<PARAMS>
						<PARAM name="parame1" type="STRING">
							<DESC></DESC>
						</PARAM>
						<PARAM name="parama2" type="INTEGER">
							<DESC></DESC>
						</PARAM>
					</PARAMS>	
					<DESC>return { :parame1 => "value1", :parama2 = > 55 }</DESC>
				</RETURN>
			</METHOD>
			<METHOD name="produceComplicatedResult">
				<DESC>example of producing complicated type(array of hash of dif types) for return. should return ; [{ :parame1 => "value1", :parama2 = > 55 }, { :paramu3 => [1,2,3] } ]</DESC>
				<RETURN type="ARRAY">
					<PARAM type = "HASH">
						<PARAMS>
							<PARAM name="parame1" type="STRING">
								<DESC></DESC>
							</PARAM>
							<PARAM name="parama2" type="INTEGER">
								<DESC></DESC>
							</PARAM>
							<PARAM name="paramu3" type="ARRAY">
								<PARAM type="INTEGER">
									<DESC></DESC>
								</PARAM>	
								<DESC></DESC>
							</PARAM>
						</PARAMS>	
					</PARAM>
					<DESC>return [{ :parame1 => "value1", :parama2 = > 55 }, { :paramu3 => [1,2,3] } ]</DESC>
				</RETURN>
			</METHOD>
			<METHOD name="getObjectsCount" access="STATIC">
				<DESC></DESC>
				<RETURN type="INTEGER">
					<DESC>
						return count of objects
					</DESC>
				</RETURN>
			</METHOD>	
			<METHOD name="getObjectByIndex" access="STATIC">
				<DESC></DESC>
				<PARAMS>
					<PARAM name="index" type="INTEGER"/>
				</PARAMS>
				<RETURN type="Rho.Examples.Megamodule">
					<DESC>
						return object by index
					</DESC>
				</RETURN>
			</METHOD>	
			<METHOD name="showAlertFromUIThread" access="INSTANCE" runInThread="ui" hasCallback="none">
				<DESC>show Alert from UI thread</DESC>
				<PARAMS>
					<PARAM  name ="message" type="STRING">
							<DESC> message for show in Alert box</DESC>
					</PARAM>
				</PARAMS>
			</METHOD>
			<METHOD name="setPeriodicallyCallback" access="INSTANCE" hasCallback="mandatory">
				<DESC>start periodically callback</DESC>
				<PARAMS>
					<PARAM  name ="periodInMilliseconds" type="INTEGER">
						<DESC>hash of additional settings for scan</DESC>
						<CAN_BE_NIL>
							<DESC>use dafault period = 5000 miliseconds (5 seconds)</DESC>
						</CAN_BE_NIL>
					</PARAM>
				</PARAMS>
			</METHOD>
			<METHOD name="isPeriodicallyCallbackSetted" access="INSTANCE" hasCallback="optional">
				<DESC>check for callback is setted</DESC>
				<RETURN type="BOOLEAN">
					<DESC>return true if setted</DESC>
				</RETURN>
			</METHOD>
			<METHOD name="stopPeriodicallyCallback" access="INSTANCE" hasCallback="none">
				<DESC>stop callback</DESC>
			</METHOD>
			<METHOD name="complicatedTypesTest1">
				<DESC>test complicated params: return true if params == [ { :intItem => 35, :strItem => 'ddd', hashItem => { :itemStr => 'eee', :itemArray => [true, false, true] } }, { :intItem => 12, :strItem => 'bla-bla-bla' } ]</DESC>
				<PARAMS>
					<PARAM name="paramArray" type="ARRAY">
						<PARAM type="HASH">
							 <PARAMS>
							 	  <PARAM name="intItem" type="INTEGER">
								 	  	<DESC>doc text</DESC>
							 	  </PARAM>
							 	<PARAM name="strItem" type="STRING">
							 		<DESC>doc text</DESC>
							 	</PARAM>
							 	<PARAM name="hashItem" type="HASH">
							 		<DESC>doc text</DESC>
							 		<PARAMS>
							 			<PARAM name="itemStr" type="STRING">
							 				<DESC>doc text</DESC>
							 			</PARAM>
							 			<PARAM name="itemArray" type="ARRAY">
							 				<DESC>doc text</DESC>
							 				<PARAM type="BOOLEAN">
							 					<DESC>doc text</DESC>
							 				</PARAM>
							 			</PARAM>
							 		</PARAMS>
							 	</PARAM>
							 </PARAMS>
						</PARAM>		
					</PARAM>
				</PARAMS>
				<RETURN type="BOOLEAN">
					<DESC>return true if params == [ { :intItem => 35, :strItem => 'ddd', hashItem => { :itemStr => 'eee', :itemArray => [true, false, true] } }, { :intItem => 12, :strItem => 'bla-bla-bla' } ]</DESC>
				</RETURN>
			</METHOD>
			
			<ALIASES>
				<ALIAS new="set_period" existing="setPeriodicallyCallback" deprecated="true" >
					<DESC>old deprecated set callback method</DESC>
				</ALIAS>
			</ALIASES>
		</METHODS>
		<USER_OVERVIEW>
		</USER_OVERVIEW>	
		<VER_INTRODUCED>1.0.0</VER_INTRODUCED>
		<PLATFORM></PLATFORM>
	</MODULE>
</API>