describe('Developer Experience - Build live update Functionality Test', function() {
    it("Should search and register all the subscribers connected to the server", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should search and register all the subscribers connected to the server");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addStep("From the project root folder run command rake dev:discovery.");
        spec.addExpectation("Web server should be started if not running.");
        spec.addExpectation("In dev-config.yml it should register all the available subscribers with eg:devices:  uri: 192.168.1.102:37579  name: macbook-pro  platform: APPLE  application: ReloadBundleformat");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Discovery from app2 when app1 and app2 is launched in different subscribers", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Discovery from app2 when app1 and app2 is launched in different subscribers");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build app1 and app2 with \'development\' extension for all platforms.");
        spec.addPrecondition("Install app1 and app2 application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator).");
        spec.addPrecondition("Launch the app1 in some subscribers and app2 in other subscribers.");
        spec.addStep("From app2 project root folder run command rake dev:discovery.");
        spec.addExpectation("Web server should be started if not running.");
        spec.addExpectation("Devices launched with App2 should be registered in dev_config.yml.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("On applying partial update, should detect changed HTML file, builds partial bundle update and sends notification", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("On applying partial update, should detect changed HTML file, builds partial bundle update and sends notification");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator).");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Modify HTML file in app and pubic folder with code <p id=\'pid\' onClick=\'alertTest()\'>Modified HTML file onetime update</p>.");
        spec.addStep("Call rake dev:update:partial");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should detect changed html file, builds partial bundle update and sends notification to subscriber.");
        spec.addExpectation("After refresh modified HTML page should be displayed.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("On applying partial update, should detect changed JS file, builds partial bundle update and sends notification", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("On applying partial update, should detect changed JS file, builds partial bundle update and sends notification");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml");
        spec.addPrecondition("Stop all servers and start webserver rake dev:webserver:start");
        spec.addStep("Modify JS file in app and pubic folder with code function alertTest() { alert(\'Test alert for onetime update\')} ");
        spec.addStep("Call rake dev:update:partial.");
        spec.addStep("Call the alertTest funtion.");
        spec.addExpectation("Web server should be started.");
        spec.addExpectation("Should detect changed JS file, builds partial bundle update and sends notification  to subscriber.");
        spec.addExpectation("Automatic page refresh should happen and on calling alert function should display alert message.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("On applying partial update, should detect changed CSS file, builds partial bundle update and sends notification", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("On applying partial update, should detect changed CSS file, builds partial bundle update and sends notification");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: false to dev-config.yml");
        spec.addStep("Modify CSS file in app and public folder with code #pid {background-color:red}.");
        spec.addStep("Call rake dev:update:partial.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should detect changed CSS file, builds partial bundle update and sends notification to subscriber.");
        spec.addExpectation("After manual refresh Background-color should be Red.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("On applying partial update, should detect changed Ruby file, builds partial bundle update and sends notification", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("On applying partial update, should detect changed Ruby file, builds partial bundle update and sends notification");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'Test alert for onetime update\'; end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%> ");
        spec.addStep("Call rake dev:update:partial.");
        spec.addStep("Refresh the page.");
        spec.addStep("Call show_popup function.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should detect changed erb and controller file, builds partial bundle update and sends notification to subscriber.");
        spec.addExpectation("Popup should be displayed on calling show popup function.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("On applying partial update, should detect newly added HTML, CSS, JS, image and Ruby files and builds partial bundle update and sends notification", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("On applying partial update, should detect newly added HTML, CSS, JS, image and Ruby files and builds partial bundle update and sends notification");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator).");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("To App and public folder Add new HTML, CSS, JS, image and Ruby files");
        spec.addStep("Add links to the newly added files.");
        spec.addStep("Call rake dev:update:partial.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should detect added HTML, CSS, JS, image and Ruby files, builds partial bundle update and sends notification to subscriber.");
        spec.addExpectation("Added HTML, CSS, JS, image and Ruby files links should be working.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should Auto update in all registered subscribers on Modifying HTML files", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should Auto update in all registered subscribers on Modifying HTML files");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify HTML file in app and pubic folder with code <p id=\'pid\' onClick=\'alertTest()\'> Auto update HTML files </p>.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On changing HTML file monitoring process should run rake dev:update:partial and apply changes to subscriber.");
        spec.addExpectation("After refresh modified HTML content should be seen.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should Auto update in all registered subscribers on Modifying JS files", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should Auto update in all registered subscribers on Modifying JS files");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: false to dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify JS file in app and pubic folder with code function alertTest() { alert(\'Test alert for auto update\')}");
        spec.addStep("Call the alertTest funtion.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process.");
        spec.addExpectation("On changing JS file monitoring process should run rake dev:update:partial and apply changes to subscriber.");
        spec.addExpectation("After refresh alert message should be displayed.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should Auto update in all registered subscribers on Modifying CSS file", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should Auto update in all registered subscribers on Modifying CSS file");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify CSS file in app and public folder with code #pid {background-color:green}.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On changing CSS file monitoring process should run rake dev:update:partial and apply changes to subscriber.");
        spec.addExpectation("Page should be refreshed automatically and background-color green should be applied to page.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should Auto update in all registered subscribers on Modifying ruby files", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should Auto update in all registered subscribers on Modifying ruby files");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'Test alert for Auto update\';end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%> ");
        spec.addStep("Call show_popup function.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On changing Ruby file monitoring process should run rake dev:update:partial and apply changes to subscriber.");
        spec.addExpectation("Page should be refreshed automatically and popup should be displayed on calling show popup function.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should Auto update in all registered subscribers on Adding new model to project", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should Auto update in all registered subscribers on Adding new model to project");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("In the app folder add a model by using the command rhodes model newmodel test1 test2 test3.");
        spec.addStep("Refresh the page and open the newmodel added to the application.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On adding newmodel monitoring process should run rake dev:update:partial and apply changes to subscriber.");
        spec.addExpectation("New model should be loaded.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should Auto update in all registered subscribers on adding new HTML, CSS, JS, image and Ruby files to project.", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should Auto update in all registered subscribers on adding new HTML, CSS, JS, image and Ruby files to project.");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("To App and public folder Add new HTML, CSS, JS, image and Ruby files");
        spec.addStep("Add links to the newly added files.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On adding HTML, CSS, JS and Ruby files monitoring process should run rake dev:update:partial and apply changes to subscriber.");
        spec.addExpectation("On refreshing added HTML, CSS, JS, image and Ruby files should be loaded.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should Auto update in all registered subscribers on Deleting HTML, JS, CSS files from project", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should Auto update in all registered subscribers on Deleting HTML, JS, CSS files from project");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Delete HTML, CSS, JS, image and Ruby files from app and public folder.");
        spec.addStep("Refresh the page.");
        spec.addStep("Check the links working or not.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On deleting HTML, CSS, JS and Ruby monitoring process should run rake dev:update:partial and apply changes to subscriber..");
        spec.addExpectation("HTML, CSS, JS and Ruby files should be deleted in all devices, links to corresponding files should not work.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Full bundle update on modifying HTML, CSS, JS and Ruby files to project.", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Full bundle update on modifying HTML, CSS, JS and Ruby files to project.");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Modify HTML, CSS, JS and Ruby files.");
        spec.addStep("Run command rake dev:update:full.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should detect changed html, css, js and ruby file, builds full bundle update and sends notification to subscriber.");
        spec.addExpectation("After refresh modified HTML, JS, CSS and Ruby files should be displayed.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Full bundle update on adding new HTML, CSS, JS and Ruby files to project.", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Full bundle update on adding new HTML, CSS, JS and Ruby files to project.");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("To App and public folder Add new HTML, CSS, JS, image and Ruby files");
        spec.addStep("Add links to the newly added files.");
        spec.addStep("Run command rake dev:update:full.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should bundle all the files located in app and public folder and should notify subscriber");
        spec.addExpectation("Added HTML, CSS, JS, Ruby and image files should be reflected in the subscriber.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should return an error message on Modifying project files when device is switched off and start the application for full bundle update", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should return an error message on Modifying project files when device is switched off and start the application for full bundle update");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Switch off the device.");
        spec.addStep("Modify HTML file in app and pubic folder with code <p id=\'pid\' onClick=\'alertTest()\'>Device is switched off.</p>.");
        spec.addStep("Modify js file in app and publid folder. function alertTest() { alert(\'Device is switched off\')}");
        spec.addStep("Add css styling to css file #pid {background-color:#00ff00}");
        spec.addStep("Turn on the device and start the application.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On modifying files monitoring process should run rake dev:update:partial.");
        spec.addExpectation("In Web-server terminal window should get error \'subcriber notify…failed\'. ");
        spec.addExpectation("After starting the application full bundle update should happen.");
        spec.addExpectation("Modified files should get reflected in the subscriber.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should return an error message on modifying project files when application was terminated and start the application for full bundle update", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should return an error message on modifying project files when application was terminated and start the application for full bundle update");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Terminate the application on the device.");
        spec.addStep("Modify HTML file in app and pubic folder with code <p id=\'pid\' onClick=\'alertTest()\'>Application terminated</p>.");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'Application Terminated\'; end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%>");
        spec.addStep("Start the application.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On modifying files monitoring process should run rake dev:update:partial.");
        spec.addExpectation("In Web-server terminal window should get error \'subcriber notify…failed\'. ");
        spec.addExpectation("After starting the application full bundle update should happen.");
        spec.addExpectation("Modified files should get reflected in the subscriber.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Adding files to project when network is not avaiable and full bundle update once the network is available", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Adding files to project when network is not avaiable and full bundle update once the network is available");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Disable network connection on the device");
        spec.addStep("Add HTML, CSS, JS, erb and image files to project.");
        spec.addStep("Run rake dev:update:partial");
        spec.addStep("After getting error message, Enable network on devices.");
        spec.addStep("Run rake dev:update:partial.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("On running run rake dev:update:partial when network is disabled Web-server terminal window should get error \'subcriber notify…failed\'. ");
        spec.addExpectation("After regaining network full bundle update should happen.");
        spec.addExpectation("Added files should get reflected in the subscriber.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should update new subscriber with modified files when it is newly registered", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should update new subscriber with modified files when it is newly registered");
        spec.addPrecondition("Connect any 2 devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the application in 3 subscribers.");
        spec.addPrecondition("Launch the application in 2 subscribers.");
        spec.addPrecondition("Discover and register 2 subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify HTML file in app folder with code <p>First update 2 devices</p>.");
        spec.addStep("Now Discover and register 3rd subscriber in dev-config.yml.");
        spec.addStep("Launch application in 3rd subscriber.");
        spec.addStep("Append HTML file in app folder with code <p>Second update 3 devices</p>.");
        spec.addExpectation("Web server should be started if not running.");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("When 3rd device is registered, it should apply with both the updates.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Using External file watcher grunt to detect changes in HTML file", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Using External file watcher grunt to detect changes in HTML file");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml");
        spec.addPrecondition("Run external file watcher grunt.");
        spec.addStep("Modify HTML file in app and pubic folder with code <p id=\'pid\' onClick=\'alertTest()\'>External file watcher grunt </p>.");
        spec.addStep("External watcher should create list of changed files in upgrade_package_add_files.txt");
        spec.addStep("By using modified files list call command rake dev:update:build_and_notify.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Build_and_notify command should build partial bundle from upgrade_package_add_files.txt files list.");
        spec.addExpectation("Should auto refresh and modified HTML page should be displayed.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Using External file watcher grunt to detect added JS file", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Using External file watcher grunt to detect added JS file");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Run external file watcher grunt.");
        spec.addStep("Add new JS and CSS files to app and puble folder ");
        spec.addStep("External watcher should create list of added files in upgrade_package_add_files.txt ");
        spec.addStep("By using added files list call command rake dev:update:build_and_notify.");
        spec.addExpectation("Web server should be started if not running ");
        spec.addExpectation("Build_and_notify command should build partial bundle from upgrade_package_add_files.txt files list. ");
        spec.addExpectation("JS and CSS files should be added to subscribers");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Using External file watcher grunt to detect deleted JS file", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Using External file watcher grunt to detect deleted JS file");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Run external file watcher grunt.");
        spec.addStep("Delete js file from app and puble folder ");
        spec.addStep("External watcher should create list of deleted files in upgrade_package_remove_files.txt.");
        spec.addStep("By using deleted files list call command rake dev:update:build_and_notify.");
        spec.addExpectation("Web server should be started if not running ");
        spec.addExpectation("Build_and_notify command should build partial bundle from upgrade_package_remove_files.txt files list. ");
        spec.addExpectation("JS file should be removed in subscribers");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Using External file watcher grunt to detect changes in CSS file", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Using External file watcher grunt to detect changes in CSS file");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml");
        spec.addPrecondition("Run external file watcher grunt.");
        spec.addStep("Modify CSS file in app and pubic folder with code #pid {background-color:red}.");
        spec.addStep("External watcher should create list of changed files in upgrade_package_add_files.txt");
        spec.addStep("By using modified files list call command rake dev:update:build_and_notify.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Build_and_notify command should build partial bundle from upgrade_package_add_files.txt files list.");
        spec.addExpectation("Should auto refresh and backgroud-color should be Red.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Using External file watcher grunt to detect changes in Ruby file", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Using External file watcher grunt to detect changes in Ruby file");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Run external file watcher grunt.");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'External file watcher\'; end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%>.");
        spec.addStep("External watcher should create list of changed files in upgrade_package_add_files.txt");
        spec.addStep("By using modified files list call command rake dev:update:build_and_notify.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Build_and_notify command should build partial bundle from upgrade_package_add_files.txt files list.");
        spec.addExpectation("Popup should be displayed on calling show popup function.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Using External file watcher grunt to detect changes in scss file and update in css file", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Using External file watcher grunt to detect changes in scss file and update in css file");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Run external file watcher grunt.");
        spec.addStep("Add a style.scss file.");
        spec.addStep("Add css styling to scss file #pid {background-color:brown}");
        spec.addStep("Call rake dev:update:build_and_notify");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("External watcher should detect source code changes and should create list of changed files list in upgrade_package_add_files.txt");
        spec.addExpectation("Command should detect changed CSS files, builds partial bundle update and sends notification to subscribers once.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should return an error message on runing rake dev:update:build_and_notify and Modifying project files when device is switched off", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should return an error message on runing rake dev:update:build_and_notify and Modifying project files when device is switched off");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Switch off the device.");
        spec.addStep("Modify HTML file in app and pubic folder with code <p>Device is switched off.</p>.");
        spec.addStep("Add css styling to css file #pid {background-color:#00ff00}");
        spec.addStep("External watcher should create list of changed files in upgrade_package_add_files.txt");
        spec.addStep("By using modified files list call command rake dev:update:build_and_notify.");
        spec.addStep("Turn on the device and start the application.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Build_and_notify command should build partial bundle from upgrade_package_add_files.txt files list.");
        spec.addExpectation("In Web-server terminal window should get error \'subcriber notify…failed\'. ");
        spec.addExpectation("After starting the application full bundle update should happen.");
        spec.addExpectation("Modified files should get reflected in the subscriber.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should update all subscribers on changing files when registered manually on dev-config.yml", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should update all subscribers on changing files when registered manually on dev-config.yml");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addStep("Register the subscribers manually add uri: 192.168.1.102:37579 name: macbook-pro platform: APPLE application: ReloadBundleformat to dev-config.yml");
        spec.addStep("To apply auto update run command rake dev:update:auto");
        spec.addStep("Modify HTML file in app and pubic folder with code <p>Register manually subscribers on server</p>.");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On changing HTML file monitoring process should run rake dev:update:partial and apply changes to subscriber.");
        spec.addExpectation("After refresh modified HTML content should be seen.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should update all subscribers on changing images, HTML, JS, CSS and ruby files when built from Rhohub.", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should update all subscribers on changing images, HTML, JS, CSS and ruby files when built from Rhohub.");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("Build the aplication with \'development\' extension in RhoHub for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Rhohub repository should be cloned to desktop.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify HTML file in app and public folder with code <p id=\'pid\' onClick=\'alertTest()\'>RhoHub with auto update..</p>.");
        spec.addStep("Modify js file with code function alertTest() { alert(\'Development on rhohub\')}");
        spec.addStep("Modify CSS file with code  #pid {backgroung-color:red}");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'Rhohub update\'; end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%>");
        spec.addStep("Refresh the page. ");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On changing HTML and Ruby file monitoring process should run rake dev:update:partial.");
        spec.addExpectation("On refreshing should display Modified HTML page.");
        spec.addExpectation("Should display popup on caling popup/alert function");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should update all subscribers on changing images, HTML, JS, CSS and ruby files when built from Containers.", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should update all subscribers on changing images, HTML, JS, CSS and ruby files when built from Containers.");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("Build the aplication with \'development\' extension using local Containers for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify HTML file in app and public folder with code <p id=\'pid\' onClick=\'alertTest()\'>Containers with auto update..</p>.");
        spec.addStep("Modify js file with code function alertTest() { alert(\'Development Containers\')}");
        spec.addStep("Modify CSS file with code  #pid {backgroung-color:red}");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'Containers update\'; end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%>");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On changing HTML and Ruby file monitoring process should run rake dev:update:partial.");
        spec.addExpectation("On refreshing should display Modified HTML page.");
        spec.addExpectation("Should display popup on caling popup/alert function");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should update all subscribers on changing images, HTML, JS, CSS and ruby files when built from prebuilt containers(Rhomobile / App Store / GitHub).", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should update all subscribers on changing images, HTML, JS, CSS and ruby files when built from prebuilt containers(Rhomobile / App Store / GitHub).");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("Build the aplication with \'development\' extension using Prebuilt Containers for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Modify HTML file in app and public folder with code <p id=\'pid\' onClick=\'alertTest()\'>Prebuilt Containers with auto update..</p>.");
        spec.addStep("Modify js file with code function alertTest() { alert(\'Development Prebuilt Containers\')}");
        spec.addStep("Modify CSS file with code  #pid {backgroung-color:red}");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'Prebuilt Containers update\'; end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%>");
        spec.addStep("Refresh the page.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("The auto update command should launch file system monitoring process. ");
        spec.addExpectation("On changing HTML and Ruby file monitoring process should run rake dev:update:partial.");
        spec.addExpectation("On refreshing should display Modified HTML page.");
        spec.addExpectation("Should display popup on caling popup/alert function");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Discovery timeout test", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Discovery timeout test");
        spec.addPrecondition("Dont connect any devices server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator, and IOS simulator)");
        spec.addPrecondition("Launch the aplication all subscribers.");
        spec.addStep("Run command rake dev:discovery.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Timeout should happen when no devices connected to the server network");
        spec.addExpectation("In MAC discovery timeout should happen in 5 sec");
        spec.addExpectation("In Windows discovery timeout should happen in 21 sec");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Modified files should get updated in all the devices at once when more than 10 devices connected.", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Modified files should get updated in all the devices at once when more than 10 devices connected.");
        spec.addPrecondition("Connect more than 10 devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Add controller code Alert.show_popup \'More than 10 devices\';");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Changed files should be applied to all connected devices at once in parallel.");
        spec.addExpectation("Same time popup should be displayed in all devices");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Performance Check between partial and full bundle update", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Performance Check between partial and full bundle update");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Modify HTML file in app folder with code <p>first modification for performance check</p>.");
        spec.addStep("Call rake dev:update:partial and Check time. ");
        spec.addStep("Modify HTML file in app folder with code <p>second modification for performance check</p>.");
        spec.addStep("Call rake dev:update:full and Check time.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Partial bundle update should be faster than full bundle update");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Performance Check of full bundle update with and without clean", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Performance Check of full bundle update with and without clean");
        spec.addPrecondition("Connect devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator, and IOS simulator)");
        spec.addPrecondition("Launch the aplication all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Add refresh: true to dev-config.yml.");
        spec.addStep("Modify HTML file in app folder with code <p>First full bundle</p>.");
        spec.addStep("Call rake dev:update:full and Check time.");
        spec.addStep("Call rho clean:platformname.");
        spec.addStep("Modify HTML file in app folder with code <p>Second full bundle</p>.");
        spec.addStep("Call rake dev:update:full and Check time.");
        spec.addStep("Modify HTML file in app folder with code <p>Third full bundle</p>.");
        spec.addStep("Call rake dev:update:full and Check time.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("There should not be any time difference for full bundle update with and without clean.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Checking auto-disable of development extension with distribution build", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Checking auto-disable of development extension with distribution build");
        spec.addPrecondition("Connect devices to server network.");
        spec.addPrecondition("In local computer build the distribution application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator, and IOS simulator)");
        spec.addPrecondition("Launch the aplication all subscribers.");
        spec.addStep("From project root folder run command rake dev:discovery.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Distribution applications should not be discovered .");
        spec.addExpectation("It should discover only Relase/debug build.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Checking discovery without \'development\' extension", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Checking discovery without \'development\' extension");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application without \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator, and IOS simulator)");
        spec.addPrecondition("Launch the aplication all subscribers.");
        spec.addStep("From project root folder run command rake dev:discovery.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Subscribers without development extension should not be discovered");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Checking discovery without network", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Checking discovery without network");
        spec.addPrecondition("Server should not be connected in any network");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator, and IOS simulator)");
        spec.addPrecondition("Launch the aplication all subscribers.");
        spec.addStep("From project root folder run command rake dev:discovery.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("There should not be any abnormal behavior. Shoud display proper error message");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Start webserver, apply update and stop webserver", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Start webserver, apply update and stop webserver");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Stop all webservers.");
        spec.addStep("Modify HTML file in app and pubic folder with code <p>Webserver Test</p>.");
        spec.addStep("Start the webserver by rake dev:webserver:start");
        spec.addStep("Call rake dev:update:partial");
        spec.addStep("Stop the webserver by rake dev:webserver:stop");
        spec.addExpectation("Webserver should be started succesfully.");
        spec.addExpectation("On running update command changed HTML file should be applied to subscriber.");
        spec.addExpectation("It should not start one more server in background.");
        spec.addExpectation("Webserver should be stopped succesfully");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Checking auto update on webserver restart", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Checking auto update on webserver restart");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("Stop all webservers.");
        spec.addStep("Run command rake dev:update:auto.");
        spec.addStep("Modify HTML file in app and pubic folder with code <p>Webserver restart</p>.");
        spec.addStep("Stop the webserver by rake dev:webserver:stop");
        spec.addStep("Modify HTML file in app and pubic folder with code <p>Webserver stop</p>.");
        spec.addStep("restart the webserver by rake dev:webserver:start");
        spec.addExpectation("Webserver should be started succesfully.");
        spec.addExpectation("Once the webserver is stopped any auto update should be failed");
        spec.addExpectation("Once the webserver is restarted changed html file should be applied automatically.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should not apply changes made in public/api folder", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should not apply changes made in public/api folder");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Add HTML, CSS, JS files to public/api folder.");
        spec.addStep("Add code to /public/api/rho-api.js function alertTest() { alert(\'Test alert for onetime update\')} ");
        spec.addStep("Run rake dev:update:partial");
        spec.addStep("Try to open the link and call alert function");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should not apply changes made in public/api folder");
        spec.addExpectation("HTML link and alert function should not work");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should not apply changes made other than app and public folder", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should not apply changes made other than app and public folder");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the application on all subscribers (WM, CE, Android, IOS, Android Simulator and IOS simulator)");
        spec.addPrecondition("Launch the application in all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Add HTML, CSS, JS files to root folder.");
        spec.addStep("Add one extension(audiocapture) in build.yml");
        spec.addStep("Change start page in rhoconfig.txt");
        spec.addStep("Run rake dev:update:partial.");
        spec.addStep("Check the HTML links added working or not, Test audiocapture function.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should not apply changes made other than app and public folder");
        spec.addExpectation("Start page should not be changed.");
        spec.addExpectation("audiocapture API should not work");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Should hit breakpoints when built with debug configarations", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Should hit breakpoints when built with debug configarations");
        spec.addPrecondition("Connect the devices to server network.");
        spec.addPrecondition("In Rhostudio build using Debug configarations with \'development\' extension");
        spec.addPrecondition("Application should be launched in subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addStep("Modify controller file in app folder with code def show_popup  Alert.show_popup \'Test alert for onetime update\'; end");
        spec.addStep("Add link to this function in erb file with code <%= link_to \'[show_popup]\', { :action => :show_popup }%>.");
        spec.addStep("Add break pont to alert function in controller file.");
        spec.addStep("Run rake dev:update:partial.");
        spec.addStep("Invoke alert function.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should detect changed erb and controller file, builds partial bundle update and sends notification to subscriber.");
        spec.addExpectation("Should hit breakpoint when alert function is called.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Changes to the subscriber should be applied when more than 50 files are added to the project", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Changes to the subscriber should be applied when more than 50 files are added to the project");
        spec.addPrecondition("Connect devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator, and IOS simulator)");
        spec.addPrecondition("Launch the aplication all subscribers.");
        spec.addPrecondition("Discover and register subscribers in dev-config.yml.");
        spec.addPrecondition("To Apply auto update run command rake dev:update:auto");
        spec.addStep("Add more than 50 HTML, CSS or JS files to the project.");
        spec.addStep("Add 2 to 5 MB image files.");
        spec.addStep("Check the added files reflected in subscriber or not.");
        spec.addExpectation("Web server should be started if not running");
        spec.addExpectation("Should detect added html, css, js and image files, builds partial bundle update and sends notification to subscriber.");
        spec.addExpectation("All the added files should be reflectd in subscriber.");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });

    it("Running live update commands without setting a token", function() {
        var spec = new ManualSpec(jasmine, window.document);
        spec.addGoal("Running live update commands without setting a token");
        spec.addPrecondition("Connect devices to server network.");
        spec.addPrecondition("In local computer build the application with \'development\' extension for all platforms.");
        spec.addPrecondition("Install the  application on all subscribers (WM, CE, Android, IOS, Android Simulator, and IOS simulator)");
        spec.addPrecondition("Launch the aplication all subscribers.");
        spec.addPrecondition("Clear the token by rake token:clear");
        spec.addStep("Run live update commands like rake dev:discovery, rake dev:update:partial, rake dev:update:full, rake dev:update:auto, rake dev:update:build_and_notify");
        spec.addStep("Check whether asking for rhohub login");
        spec.addExpectation("Should ask for rhohub login on running live update commands");
        spec.displayScenario();
        spec.waitForButtonPressing("Run test");
        spec.waitForResponse();
    });
});