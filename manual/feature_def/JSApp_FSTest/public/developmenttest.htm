
<HTML> 
<HEAD> 
<TITLE>NPAPI Legacy ActiveX tet page</TITLE> 
</HEAD> 
<BODY id="bodyId"> 
<BR><BR> 
<center> 
<h1>Legacy ActiveX Test Page</h1> 
</center> 
 
This page tests NPAPI for the legacy ActiveX.
 
<br><br> 
 
<center> 
 
<script> 
var ProcessHandle;
var HKEY_LOCAL_MACHINE = 2;
var REG_SZ = 1;
var REG_BINARY = 3;
var REG_DWORD = 4;
var REG_MULTI_SZ = 7;
var SZ_HKEY_LOCAL_MACHINE = '2';
var SZ_REG_SZ = '1';
var SZ_REG_BINARY = '3';
var SZ_REG_DWORD = '4';
var SZ_REG_MULTI_SZ = '7';
function bar(arg)
{
  document.getElementById("divReturnValue").innerHTML += "<p>" + "function bar(" + arg + ") called!" + "</p>";
 
  return 4;
}

function testActiveXGenericLog()
{
	var objGeneric = new ActiveXObject('PocketBrowser.Generic');
	objGeneric.Log('Log Example',1);
}

function testActiveXGenericConvolutedLog()
{
	objGeneric2 = new ActiveXObject('PocketBrowser.Generic');
	objGeneric2.Log('This is a log from the convoluted example (objGeneric2)',1);
	setTimeout("objGeneric2.Log('Log from convoluted example in timeout (objGeneric2)',1);", 100);
	objGeneric3.Log('This is a log from the convoluted example (objGeneric3)',1);
	setTimeout("objGeneric3.Log('Log from convoluted example in timeout (objGeneric3)',1);", 100);
}

function testActiveXGenericInvokeMETA()
{
	var objGeneric = new ActiveXObject('PocketBrowser.Generic');
	objGeneric.InvokeMETAFunction("scanner","enabled");
	divReturnValue.innerHTML = "Scanner is Enabled";
}

function testActiveXGenericOEM()
{
        alert("create objGeneric");

	var objGeneric = new ActiveXObject('PocketBrowser.Generic');
  
        if (objGeneric == null)
          { alert("objGeneric == null"); }
        else
          { alert("objGeneric != null"); }

	divReturnValue.innerHTML = objGeneric.OEMInfo;
	alert(objGeneric.OEMInfo.toString());
}

function testActiveXAPDPSExternal()
{	
	var objAPD = new ActiveXObject('PocketBrowser.NarrowBand');
	objAPD.PSExternalEx('257', '2350C');  //  Help file example
	divReturnValue.innerHTML = "Last message: " + objAPD.PSGetLastMessage();
}


function testActiveXAirbeam()
{
	var objAB = new ActiveXObject('PocketBrowser.AirBEAMSmart');
	var retVal = objAB.AddPackage("myPackage");
	setTimeout('objAB.Run();', 100);
	//objAB.Run();
	divReturnValue.innerHTML = "Add Package and run setTimeout, package add success? " + retVal;
}

function testActiveXShowSIP(bShowSIP)
{
	var objNoSIP = new ActiveXObject('NoSIP.NSEdit');	
	objNoSIP.ShowSIP(bShowSIP);
	if (bShowSIP)
		divReturnValue.innerHTML = "The SIP should be Shown";
	else
		divReturnValue.innerHTML = "The SIP should be Hidden";
}


function testActiveXODAX()
{
	var ax = new ActiveXObject("CeODAX.ODAX");
	var srcFileName = '\\test.xml';
	var destFileName = '\\test2.xml';
	var status = ax.Copy(srcFileName, destFileName);
	divReturnValue.innerHTML = "Copy Success? (0 is good): " + status;
}



</script> 
 
<div id="divReturnValue">Test Output</div>

<br> 
</center> 
<!--  Active X -->
<b>ActiveX Tests</b>
<br>
<input type=button value="ActiveX Generic Log" onclick='testActiveXGenericLog()'> 
<input type=button value="Generic Log XTREME" onclick='testGenericLogXTREME()'> 
<input type=button value="ActiveX Generic Log (Convoluted)" onclick='testActiveXGenericConvolutedLog()'> 
<input type=button value="ActiveX Generic Invoke META" onclick='testActiveXGenericInvokeMETA()'> 
<input type=button value="ActiveX Generic OEM" onclick='testActiveXGenericOEM()'> 
<input type=button value="ActiveX APD PSExternal" onclick='testActiveXAPDPSExternal()'> 
<input type=button value="ActiveX Airbeam" onclick='testActiveXAirbeam()'> 
<input type=button value="ActiveX NoSIP ShowSIP" onclick='testActiveXShowSIP(true)'> 
<input type=button value="ActiveX NoSIP HideSIP" onclick='testActiveXShowSIP(false)'> 
<input type=button value="ActiveX ODAX" onclick='testActiveXODAX()'> 




</BODY> 
</HTML> 